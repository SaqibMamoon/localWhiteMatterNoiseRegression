#!/usr/bin/python3

import os
import json
import imageio
import matplotlib.pyplot as plt
import nibabel as nib
from make_binary_masks_from_fsdir import make_binary_masks_from_fsdir

################### Define some plotting functions ###########################

def make_plot(base_image, overlay, title, filename, x, y, z, apect_ratio_vector, output_folder):
    
    # This function simply gets two MRI images as inputs and overlays them 
    # using different colors for each image. Used as a diagnostic image.
        
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    fig.suptitle(title, fontsize=20)

    epi_img = nib.load(base_image)
    epi_img_data = epi_img.get_fdata()
    ax1.imshow(epi_img_data[x,:,:], cmap="gray", aspect = apect_ratio_vector[0])
    ax2.imshow(epi_img_data[:,y,:], cmap="gray", aspect = apect_ratio_vector[1])
    ax3.imshow(epi_img_data[:,:,z], cmap="gray", aspect = apect_ratio_vector[2])
    ax1.axis('off')
    ax2.axis('off')
    ax3.axis('off')  
    
    if overlay != 'NA':
        epi_img = nib.load(overlay)
        epi_img_data = epi_img.get_fdata()
        ax1.imshow(epi_img_data[x,:,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[3])
        ax2.imshow(epi_img_data[:,y,:], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[4])
        ax3.imshow(epi_img_data[:,:,z], cmap="hot", alpha=0.4, aspect = apect_ratio_vector[5])
        ax1.axis('off')
        ax2.axis('off')
        ax3.axis('off')

    plt.savefig(os.path.join(output_folder, filename))    

def make_gif(image_folder, gif_name, output_folder):
    
    # Make a gif out of multiple images
    images = []
    for filename in os.listdir(image_folder):
        images.append(imageio.imread(os.path.join(image_folder, filename)))
        imageio.mimsave('/%s/%s.gif' % (output_folder, gif_name), images, duration=0.7)

###################### Define the Paths and parameters ########################

# Set paths and create some folders
flywheel_base ='/flywheel/v0/'
first_output_dir = '/firstOutput'
os.system('mkdir %s'%first_output_dir)
final_output_dir = os.path.join(flywheel_base, 'output')
manifest_file = os.path.join(flywheel_base, 'manifest.json')
config_path = os.path.join(flywheel_base, 'config.json')
fsl_environment_path = 'FSLDIR=/usr/lib/fsl/5.0;. /etc/fsl/5.0/fsl.sh;PATH=${FSLDIR}:${PATH};export FSLDIR PATH;/usr/lib/fsl/5.0/'
freesurfer_environment_path = 'export FREESURFER_HOME=/freesurfer;/bin/bash -c \'source $FREESURFER_HOME/FreeSurferEnv.sh &>/dev/null\';export SUBJECTS_DIR=%s;/freesurfer/bin/'
mcr_path = '/usr/local/MATLAB/MATLAB_Runtime/v97' 
compiled_matlab_function = '/opt/compiled_localWM/run_remove_localWM_FwVersion.sh'

# Unzip the fmriprep zip
fmriprepOutputArchive_folder = os.path.join(flywheel_base, 'input/fmriprepOutputArchive')
fmriprepOutputArchive = os.path.join(fmriprepOutputArchive_folder, os.listdir(fmriprepOutputArchive_folder)[0]) 
unzipped_folder = '/prep'
os.system('mkdir %s' % unzipped_folder)
os.system('unzip -q %s -d %s' % (fmriprepOutputArchive, unzipped_folder))
mainprep_folder = os.path.join(unzipped_folder, os.listdir(unzipped_folder)[0], 'fmriprep')
for i in os.listdir(mainprep_folder):
    if 'sub' in i and 'html' not in i:
        prep_subject = os.path.join(mainprep_folder, i)
        for ii in os.listdir(prep_subject):
            if 'ses' in ii:
                prep_session = os.path.join(prep_subject, ii)
prep_func_dir = os.path.join(prep_session, 'func')
images_in_T1 = []
for image in os.listdir(prep_func_dir):
    if 'space-T1w_desc-preproc_bold.nii.gz' in image:
        found_image = os.path.join(prep_func_dir, image)
        images_in_T1.append(found_image)

# Unzip the recon-all archive
reconAllArchive_folder = os.path.join(flywheel_base, 'input/reconAllArchive')
reconAllArchive = os.path.join(reconAllArchive_folder, os.listdir(reconAllArchive_folder)[0]) 
unzipped_folder = '/reconall'
os.system('mkdir %s' % unzipped_folder)
os.system('unzip -q %s -d %s' % (reconAllArchive, unzipped_folder))
mainrecon_folder = os.path.join(unzipped_folder, os.listdir(unzipped_folder)[0])

###################Parse Config Here##########################################

with open(config_path) as config_file:
    job_config = json.load(config_file)
config = job_config['config']

radius = config['radius']
whiteMatterBinaryThreshold = config['whiteMatterBinaryThreshold']
BrainMaskBinaryThreshold = config['BrainMaskBinaryThreshold']
saveIntermediate = config['saveIntermediate']

# ############################# Process images ##################################

# Run the mask maker script
intermediate_files = '/intermediate_files'
os.system('mkdir %s' % intermediate_files)
converted_raw_avg, registered_brain, registered_white, brain_mask, white_matter_mask = make_binary_masks_from_fsdir(mainrecon_folder, freesurfer_environment_path, fsl_environment_path, intermediate_files, threshold_brain=BrainMaskBinaryThreshold, threshold_white=whiteMatterBinaryThreshold)

# Resample mask to the fmri resolution
a_timeseries = images_in_T1[0]
fsl_identity = '/usr/share/fsl/5.0/etc/flirtsch/ident.mat'
resampled_white = os.path.join(intermediate_files, 'resampled_whiteMatter_mask.nii.gz')
resampled_brain = os.path.join(intermediate_files, 'resampled_brain_mask.nii.gz')
resample_command_white = '%s -in %s -ref %s -applyxfm -init %s -out %s' % (os.path.join(fsl_environment_path, 'flirt'),
                                                                            white_matter_mask, a_timeseries, fsl_identity,
                                                                            resampled_white)
resample_command_brain = '%s -in %s -ref %s -applyxfm -init %s -out %s' % (os.path.join(fsl_environment_path, 'flirt'),
                                                                            brain_mask, a_timeseries, fsl_identity,
                                                                            resampled_brain)
os.system(resample_command_brain)
os.system(resample_command_white)

# Save intermediate files if requested
if saveIntermediate:
    os.system('cd %s; zip -q -r %s *' % (intermediate_files, os.path.join(final_output_dir,'intermediate_files.zip')))

# Plot diagnostics
main_diagnostics_file = '/main_diagnostics'
os.system('mkdir %s' % main_diagnostics_file)
gif_main_folder = os.path.join(main_diagnostics_file, 'gifs')
os.system('mkdir %s' % gif_main_folder)
gif_folder = os.path.join(gif_main_folder, 'images')
os.system('mkdir %s' % gif_folder)
brain_folder = os.path.join(main_diagnostics_file, 'brain')
white_folder = os.path.join(main_diagnostics_file, 'white')
os.system('mkdir %s' % brain_folder)
os.system('mkdir %s' % white_folder)

raw_loaded = nib.load(converted_raw_avg)
n_i, n_j, n_k = raw_loaded.shape
center_i = (n_i - 1) // 2  # // for integer division
center_j = (n_j - 1) // 2
center_k = (n_k - 1) // 2
raw_loaded = nib.load(resampled_white)
n_i2, n_j2, n_k2 = raw_loaded.shape
center_i2 = (n_i2 - 1) // 2  # // for integer division
center_j2 = (n_j2 - 1) // 2
center_k2 = (n_k2 - 1) // 2

make_plot(converted_raw_avg, 'NA', 'Original T1', 'T1.png', center_i, center_j, center_k, [2,2,1], brain_folder)
make_plot(registered_brain, 'NA', 'Registered Brain', 'brain.png', center_i, center_j, center_k, [2,2,1], brain_folder)
make_plot(registered_white, 'NA', 'Registered White Matter', 'white.png', center_i, center_j, center_k, [2,2,1], white_folder)
make_plot(resampled_brain, 'NA', 'Brain Mask', 'brainMask.png', center_i2, center_j2, center_k2, [2,2,1], brain_folder)
make_plot(resampled_white, 'NA', 'White Matter Mask', 'whiteMask.png', center_i2, center_j2, center_k2, [2,2,1], white_folder)
T1 = os.path.join(brain_folder, 'T1.png')
os.system('cp %s %s' % (T1, white_folder))
brain = os.path.join(brain_folder, 'brain.png')
white = os.path.join(white_folder, 'white.png')
brainMask = os.path.join(brain_folder, 'brainMask.png')
whiteMask = os.path.join(white_folder, 'whiteMask.png')

# Make gifs
make_gif(brain_folder, 'brainmask', gif_folder)
make_gif(white_folder, 'whitemask', gif_folder)

# Make html
html_file = open('%s/index.html' % os.path.join(main_diagnostics_file, 'gifs'),'w')
html_content = '''
<h1>Brain Mask</h1>
<img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
<p style="clear: both;">
<h1>White Matter Mask</h1>
<img src="./%s" style="float: left; width: 100%%; margin-right: 1%%; margin-bottom: 0.5em;" alt="Left_lateral">
<p style="clear: both;"> ''' % ('images/brainmask.gif', 'images/whitemask.gif')
html_file.write(html_content)
html_file.close() 

# Loop through images and do the white matter regression
for i in images_in_T1:
    image_name = os.path.split(i)[1][:-7]
    cmd = '%s %s %s %s %s %s %s' % (compiled_matlab_function, mcr_path,
                                    i, resampled_brain, resampled_white,
                                    first_output_dir, radius)
    os.system(cmd)

os.system('cd %s; zip -q -r %s *' % (os.path.join(main_diagnostics_file, 'gifs'), os.path.join(final_output_dir,'diagnostics.zip')))                
os.system('cd %s; zip -q -r %s *' % (first_output_dir, os.path.join(final_output_dir,'results.zip')))